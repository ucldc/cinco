AWSTemplateFormatVersion: 2010-09-09

Description:
  ECS Web Application deployment - includes a Cluster, Task Definition, and Service, and an ALB

Parameters:
  Namespace:
    Description: The namespace for the ECS Application
    Type: String
  ClusterName:
    Description: The name of the ECS cluster - if not provided, will create one using namespace.
    Type: String
    Default: ""
  VpcId:
    Description: The VPC the ECS service will run in
    Type: AWS::EC2::VPC::Id
  SubnetIDs:
    Description: Comma-separated list of subnet IDs
    Type: List<AWS::EC2::Subnet::Id>
  ContainerImage:
    Description: The container image to use for the ECS task
    {# Possible tactics for getting private repository image:
      ContainerImage: rcmd aws ecr describe-repositories --repository-names cinco/ctrl --query 'repositories[0].repositoryUri' --output text --region us-west-2
      ContainerImage: rcmd echo "`aws sts get-caller-identity --query Account --output text`.dkr.ecr.us-west-2.amazonaws.com/cinco/ctrl:latest"
    #}
    Type: String
    Default: 'public.ecr.aws/docker/library/httpd:2.4'
  ContainerEntryPoint:
    Description: The entry point for the container
    Type: CommaDelimitedList
    Default: 'sh,-c'
  ContainerCommand:
    Description: The command to run in the container
    Type: CommaDelimitedList
    Default: >-
      /bin/sh -c "echo '<html> <head> <title>Amazon ECS Sample
      App</title> <style>body {margin-top: 40px; background-color:
      #333;} </style> </head><body> <div
      style=color:white;text-align:center> <h1>Amazon ECS Sample
      App</h1> <h2>Congratulations!</h2> <p>Your application is now
      running on a container in Amazon ECS.</p> </div></body></html>' >
      /usr/local/apache2/htdocs/index.html && httpd-foreground"
  ContainerPort:
    Description: The port the container listens on, maps to 80 on the ECS host
    Type: Number
    Default: 80
  HealthCheckPath:
    Description: The path to use for the health check
    Type: String
    Default: "/healthcheck"
  ContainerCount:
    Description: The number of tasks to run in the ECS service
    Type: Number
    Default: 1
  SSLCertArn:
    Description: The ARN of the SSL certificate to use for the load balancer
    Type: String
    Default: ""
  DBInstanceSecurityGroup:
    Type: String
    Description: The security group for the RDS instance
    Default: ""

{# In addition to the CloudFormation Parameters listed above, this template also supports
   the following sceptre_user_data parameters:

  ContainerEnvironment:
    Type: a list of key-value pairs
    Description: environment variables to set in the container, eg:
      ContainerEnvironment:
        - ENV_VAR: value
    Required: false - if not provided, no environment variables will be set

  HttpAccessList:
    Type: a list of security group ids
    Description: If provided, whitelists access to the container via the load balancer
      over HTTP and, if an SSL cert is provided, HTTPS e.g.:
      HttpAccessList:
        - sg-12345678
    Required: false - if not provided, the load balancer's SecurityGroups will allow
      access to ports 80 and 443 from everywhere.

  Volumes:
    Type: a list of AWS::ECS::TaskDefinition Volumes
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volume.html
    Description: Volume configuration for tasks launched by the task definnition
      Volume Name value corresponds to SourceVolume value in ContainerMountPoints
    Required: false - if not provided, no volumes will be configured

  ContainerMountPoints:
    Type: a list of AWS::ECS::TaskDefinition MountPoints
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-mountpoint.html
    Description: a list of mount points for the container
      SourceVolume corresponds to the Name value in Volumes
    Required: false - if not provided, no mount points will be configured

  TaskPolicies:
    Type: a list of AWS::IAM::Policy Arns
    Description: policies that grant permissions to task containers,
      will be attached to the ECSTaskRole assigned to the container.
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-taskrolearn
      Can also attach policies after the stack is created using
      !stack_output ECSTaskRole, but this argument allows for the policies
      to be attached at stack creation time (esp useful if permissions are
      required for healthchecks or other container startup tasks)
    Required: false - if not provided an ECSTaskRole will be configured
      with arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  #}

Conditions:
  HasSSLCert: !Not [!Equals [!Ref SSLCertArn, ""]]
  CreateCluster: !Equals [!Ref ClusterName, ""]
  HasDBInstance: !Not [!Equals [!Ref DBInstanceSecurityGroup, ""]]

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Condition: CreateCluster
    Properties:
      ClusterName: !Ref Namespace
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-ecs-role
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${Namespace}-ecs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-task-role
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
            Condition:
              ArnLike:
                aws:SourceArn:
                  - !Sub "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:*"
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-role
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
            Condition:
              ArnLike:
                aws:SourceArn:
                  - !Sub "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:*"
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        {% if sceptre_user_data and sceptre_user_data.TaskPolicies is defined %}
        {% for policy in sceptre_user_data.TaskPolicies %}
        - {{ policy }}
        {% endfor %}
        {% endif %}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub ${Namespace}-container
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp
          Essential: true
          EntryPoint: !Ref ContainerEntryPoint
          Command: !Ref ContainerCommand
          {% if sceptre_user_data and sceptre_user_data.ContainerEnvironment is defined %}
          Environment:
            {% for env_var in sceptre_user_data.ContainerEnvironment %}
            {% for key, value in env_var.items() %}
            - Name: "{{ key }}"
              Value: "{{ value }}"
            {% endfor %}
            {% endfor %}
          {% endif %}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub /ecs/${Namespace}
              awslogs-region: us-west-2
              awslogs-stream-prefix: ecs
          {% if sceptre_user_data and sceptre_user_data.ContainerMountPoints is defined %}
          MountPoints: {{ sceptre_user_data.ContainerMountPoints }}
          {% endif %}
      {% if sceptre_user_data and sceptre_user_data.Volumes is defined %}
      Volumes: {{ sceptre_user_data.Volumes }}
      {% endif %}
      TaskRoleArn: !Ref ECSTaskRole
      Family: !Sub ${Namespace}
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: x86_64
        OperatingSystemFamily: LINUX
      Cpu: '1024'
      Memory: '3072'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for application load balancer
      GroupName: !Sub ${Namespace}-securitygroup
      VpcId: !Ref 'VpcId'
      {% if sceptre_user_data and sceptre_user_data.HttpAccessList is defined %}
      SecurityGroupIngress:
        {% for securitygroup in sceptre_user_data.HttpAccessList %}
        - Description: Allow HTTP access
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: {{ securitygroup }}
        {% endfor %}
      {% else %}
      SecurityGroupIngress:
        - Description: Allow HTTP access
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      {% endif %}

  {% if sceptre_user_data and sceptre_user_data.HttpAccessList is defined %}
  {% for securitygroup in sceptre_user_data.HttpAccessList %}
  SecurityGroupHttpsIngress{{ loop.index }}:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasSSLCert
    Properties:
      Description: Allow HTTPS access
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: {{ securitygroup }}
  {% endfor %}
  {% else %}
  SecurityGroupHttpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasSSLCert
    Properties:
      Description: Allow HTTPS access
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: "0.0.0.0/0"
  {% endif %}

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS service
      GroupName: !Sub ${Namespace}-service-securitygroup
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - Description: Allow access on ContainerPort
          IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId

  DBInstanceSecurityGroupApplicationIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: HasDBInstance
    Properties:
      GroupId: !Ref DBInstanceSecurityGroup
      IpProtocol: "tcp"
      FromPort: "5432"
      ToPort: "5432"
      SourceSecurityGroupId: !Ref ServiceSecurityGroup

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !If [CreateCluster, !Ref ECSCluster, !Ref ClusterName]
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      ServiceName: !Sub ${Namespace}-service
      SchedulingStrategy: REPLICA
      DesiredCount: !Ref ContainerCount
      LoadBalancers:
        - ContainerName: !Sub ${Namespace}-container
          ContainerPort: !Ref ContainerPort
          LoadBalancerName: !Ref AWS::NoValue
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref SubnetIDs
      PlatformVersion: 'LATEST'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
    DependsOn: HttpListener

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Sub ${Namespace}-alb
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Ref SubnetIDs

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: !Ref HealthCheckPath
      Name: !Sub ${Namespace}-targetgroup
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSSLCert
    Properties:
      Port: 443
      Protocol: HTTPS
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Certificates:
        - CertificateArn: !Ref SSLCertArn
      SslPolicy: ELBSecurityPolicy-2016-08

Outputs:
  ECSCluster:
    Description: The ECS Cluster
    Value: !If [CreateCluster, !Ref ECSCluster, !Ref ClusterName]

  TaskDefinition:
    Description: The ECS Task Definition
    Value: !Ref TaskDefinition

  SecurityGroup:
    Description: The Security Group
    Value: !Ref SecurityGroup

  ServiceSecurityGroup:
    Description: The Service Security Group
    Value: !Ref ServiceSecurityGroup

  ECSService:
    Description: The ECS Service
    Value: !Ref ECSService

  LoadBalancer:
    Description: The Load Balancer
    Value: !Ref LoadBalancer

  HttpListener:
    Description: The Http Listener
    Value: !Ref HttpListener

  TargetGroup:
    Description: The Target Group
    Value: !Ref TargetGroup

  TaskRole:
    Description: The Task Role - attach policies to this role to grant permissions to task containers
    Value: !Ref ECSTaskRole
