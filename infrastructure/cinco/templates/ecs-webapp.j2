AWSTemplateFormatVersion: 2010-09-09

Description:
  ECS Web Application deployment - includes a Cluster, Task Definition, and Service, and an ALB
  {# TODO: Add autoscaling group configuration or create a way to attach an
           autoscaling group #}

Parameters:
  Namespace:
    Description: The namespace for the ECS Application
    Type: String
  ClusterName:
    Description: The name of the ECS cluster - if not provided, will create one using namespace.
    Type: String
    Default: ""
  VpcId:
    Description: The VPC the ECS service will run in
    Type: AWS::EC2::VPC::Id
  SubnetIDs:
    Description: Comma-separated list of subnet IDs
    Type: List<AWS::EC2::Subnet::Id>
  ContainerImage:
    Description: The container image to use for the ECS task
    {# Possible tactics for getting private repository image:
      ContainerImage: rcmd aws ecr describe-repositories --repository-names cinco/ctrl --query 'repositories[0].repositoryUri' --output text --region us-west-2
      ContainerImage: rcmd echo "`aws sts get-caller-identity --query Account --output text`.dkr.ecr.us-west-2.amazonaws.com/cinco/ctrl:latest"
    #}
    Type: String
    Default: 'public.ecr.aws/docker/library/httpd:2.4'
  ContainerPort:
    Description: The port the container listens on, maps to 80 on the ECS host
    Type: Number
    Default: 80
  HealthCheckPath:
    Description: The path to use for the health check
    Type: String
    Default: "/healthcheck"
  ContainerCount:
    Description: The number of tasks to run in the ECS service
    Type: Number
    Default: 1
  Cpu:
    Description: The amount of CPU to allocate to the container
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu
    Type: String
    Default: '1024'
  Memory:
    Description: The amount of memory to allocate to the container
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-memory
    Type: String
    Default: '3072'
  SSLCertArn:
    Description: The ARN of the SSL certificate to use for the load balancer
    Type: String
    Default: ""
  DBInstanceSecurityGroup:
    Type: String
    Description: The security group for the RDS instance
    Default: ""
  ServiceTaskMaximumPercent:
    Description: An upper limit on the number of your service's tasks that are allowed in the RUNNING or PENDING
      state during a deployment, as a percentage of the desiredCount
    Type: Number
    Default: 200
  ServiceTaskMinimumHealthyPercent:
    Description: a lower limit on the number of your service's tasks that must remain in the RUNNING state during a deployment,
      as a percentage of the desiredCount
    Type: Number
    Default: 100

{# In addition to the CloudFormation Parameters listed above, this template
   also supports the following sceptre_user_data parameters:

  ApplicationType:
    Type: String
    Description: The type of application, either internet-facing or internal
    Required: false - if not provided, assume internet-facing
    AllowedValues:
      - internet-facing
      - internal

  ContainerEntryPoint:
    Type: CommaDelimitedList
    Description: The entry point for the container
    Required: false - if not provided, no entry point will be set
    Example: 'sh,-c'

  ContainerCommand:
    Type: CommaDelimitedList
    Description: The command to run in the container
    Required: false - if not provided, no command will be set
    Example: >-
      /bin/sh -c "echo '<html> <head> <title>Amazon ECS Sample
      App</title> <style>body {margin-top: 40px; background-color:
      #333;} </style> </head><body> <div
      style=color:white;text-align:center> <h1>Amazon ECS Sample
      App</h1> <h2>Congratulations!</h2> <p>Your application is now
      running on a container in Amazon ECS.</p> </div></body></html>' >
      /usr/local/apache2/htdocs/index.html && httpd-foreground"

  ContainerEnvironment:
    Type: a list of key-value pairs
    Description: environment variables to set in the container, eg:
      ContainerEnvironment:
        - ENV_VAR: value
    Required: false - if not provided, no environment variables will be set

  ContainerSecrets:
    Type: a list of key-value pairs, where value is a valid "ValueFrom"
      (typically the arn of a secret), see AWS::ECS::TaskDefinition Secrets:
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-secret.html
    Description: environment secrets to set in the container, eg:
      ContainerSecrets:
        - SECRET_NAME: arn:aws:ssm:us-west-2:123456789012:parameter/my-secret

  HttpAccessList:
    Type: a list of security group ids
    Description: If provided, whitelists access to the container via the load balancer
      over HTTP and, if an SSL cert is provided, HTTPS e.g.:
      HttpAccessList:
        - sg-12345678
    Required: false - if not provided, the load balancer's SecurityGroups will allow
      access to ports 80 and 443 from everywhere.

  Volumes:
    Type: a list of AWS::ECS::TaskDefinition Volumes
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volume.html
    Description: Volume configuration for tasks launched by the task definnition
      Volume Name value corresponds to SourceVolume value in ContainerMountPoints
    Required: false - if not provided, no volumes will be configured

  ContainerMountPoints:
    Type: a list of AWS::ECS::TaskDefinition MountPoints
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-mountpoint.html
    Description: a list of mount points for the container
      SourceVolume corresponds to the Name value in Volumes
    Required: false - if not provided, no mount points will be configured

  TaskPolicies:
    Type: a list of AWS::IAM::Policy Arns
    Description: policies that grant permissions to task containers,
      will be attached to the ECSTaskRole assigned to the container.
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-taskrolearn
      Can also attach policies after the stack is created using
      !stack_output ECSTaskRole, but this argument allows for the policies
      to be attached at stack creation time (esp useful if permissions are
      required for healthchecks or other container startup tasks)
    Required: false - if not provided an ECSTaskRole will be configured
      with arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  alarm_config:
    actions: list of arns of actions to take when alarms are triggered;
      used for CPU, Memory, and 5xx Alarms - also 4xx Alarm if configured, used
      for both AlarmActions and OKActions:
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-alarmactions
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html#cfn-cloudwatch-alarm-okactions
    cpu: overwrites defaults for an alarm that fires when the average cpu usage
      in a 60 second period is above a 90% threshold for 3 evaluation periods.
      dict with keys:
        threshold: int - the CPU threshold for the alarm (percent)
        period: int - the period for the alarm (seconds)
        evaluation_periods: int - the number of periods to evaluate (count)
    memory: overwrites defaults for an alarm that fires when the average memory
      usage in a 60 second period is above a 90% threshold for 3 evaluation
      periods. dict with keys:
        threshold: int - the Memory threshold for the alarm (percent)
        period: int - the period for the alarm (seconds)
        evaluation_periods: int - the number of periods to evaluate (count)
    fixexx: overwrites defaults for an alarm that fires when the total sum of
      5xx errors in a 900 second (15 minute) period is above a threshold count
      of 2 for a single evaluation period. dict with keys:
        threshold: int - the 5xx threshold for the alarm (count)
        period: int - the period for the alarm (seconds)
        evaluation_periods: int - the number of periods to evaluate (count)
    fourxx: creates an alarm that fires when the total sum of 4xx errors in a
      specified period (unit: seconds) is above a specified threshold (unit:
      integer count) for a specified number of evaluation periods
      dict with keys:
        threshold: int - the 4xx threshold for the alarm
        period: int - the period for the alarm
        evaluation_periods: int - the number of periods to evaluate
  #}

Conditions:
  HasSSLCert: !Not [!Equals [!Ref SSLCertArn, ""]]
  CreateCluster: !Equals [!Ref ClusterName, ""]
  HasDBInstance: !Not [!Equals [!Ref DBInstanceSecurityGroup, ""]]

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Condition: CreateCluster
    Properties:
      ClusterName: !Ref Namespace
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

  ECSExecPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${Namespace}-ecs-exec-ssm-policy
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ssmmessages:CreateControlChannel"
              - "ssmmessages:CreateDataChannel"
              - "ssmmessages:OpenControlChannel"
              - "ssmmessages:OpenDataChannel"
            Resource: "*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-ecs-role
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref ECSExecPolicy
      Policies:
        - PolicyName: !Sub ${Namespace}-ecs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-task-role
      Path: "/service-role/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
            Condition:
              ArnLike:
                aws:SourceArn:
                  - !Sub "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:*"
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !Ref ECSExecPolicy
        {% if sceptre_user_data and sceptre_user_data.TaskPolicies is defined %}
        {% for policy in sceptre_user_data.TaskPolicies %}
        - {{ policy }}
        {% endfor %}
        {% endif %}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub ${Namespace}-container
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp
          Essential: true
          {% if sceptre_user_data and sceptre_user_data.ContainerEntryPoint is defined %}
          EntryPoint: [ {{ sceptre_user_data.ContainerEntryPoint }} ]
          {% endif %}
          {% if sceptre_user_data and sceptre_user_data.ContainerCommand is defined %}
          Command:
            {% for cmd in sceptre_user_data.ContainerCommand %}
            - {{ cmd }}
            {% endfor %}
          {% endif %}
          {% if sceptre_user_data and sceptre_user_data.ContainerEnvironment is defined %}
          Environment:
            {% for env_var in sceptre_user_data.ContainerEnvironment %}
            {% for key, value in env_var.items() %}
            - Name: "{{ key }}"
              Value: "{{ value }}"
            {% endfor %}
            {% endfor %}
          {% endif %}
          {% if sceptre_user_data and sceptre_user_data.ContainerSecrets is defined %}
            {% for secret_var in sceptre_user_data.ContainerSecrets %}
            {% for key, value in secret_var.items() %}
            - Name: "{{ key }}"
              ValueFrom: "{{ value }}"
            {% endfor %}
            {% endfor %}
          {% endif %}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub /ecs/${Namespace}
              awslogs-region: us-west-2
              awslogs-stream-prefix: ecs
          {% if sceptre_user_data and sceptre_user_data.ContainerMountPoints is defined %}
          MountPoints: {{ sceptre_user_data.ContainerMountPoints }}
          {% endif %}
      {% if sceptre_user_data and sceptre_user_data.Volumes is defined %}
      Volumes: {{ sceptre_user_data.Volumes }}
      {% endif %}
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Family: !Sub ${Namespace}
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: x86_64
        OperatingSystemFamily: LINUX
      Cpu: !Ref Cpu
      Memory: !Ref Memory

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for application load balancer
      GroupName: !Sub ${Namespace}-securitygroup
      VpcId: !Ref 'VpcId'
      {% if sceptre_user_data and sceptre_user_data.HttpAccessList is defined %}
      SecurityGroupIngress:
        {# TODO: update HttpAccessList datastructure to include Cidr or SecurityGroup #}
        {% for securitygroup in sceptre_user_data.HttpAccessList %}
        - Description: Allow HTTP access
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: {{ securitygroup }}
        {% endfor %}
      {% else %}
      SecurityGroupIngress:
        - Description: Allow HTTP access
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      {% endif %}

  {% if sceptre_user_data and sceptre_user_data.GrantHttpAccessFromThisServiceTo is defined %}
  {% for grantor in sceptre_user_data.GrantHttpAccessFromThisServiceTo %}
  ServiceSecurityGroupHttpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow HTTP access
      GroupId: {{ grantor }}
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId
  {% endfor %}
  {% endif %}

  {% if sceptre_user_data and sceptre_user_data.HttpAccessList is defined %}
  {% for securitygroup in sceptre_user_data.HttpAccessList %}
  SecurityGroupHttpsIngress{{ loop.index }}:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasSSLCert
    Properties:
      Description: Allow HTTPS access
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: {{ securitygroup }}
  {% endfor %}
  {% else %}
  SecurityGroupHttpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasSSLCert
    Properties:
      Description: Allow HTTPS access
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: "0.0.0.0/0"
  {% endif %}

  {% if sceptre_user_data and sceptre_user_data.GrantHttpAccessFromThisServiceTo is defined %}
  {% for grantor in sceptre_user_data.GrantHttpAccessFromThisServiceTo %}
  ServiceSecurityGroupHttpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasSSLCert
    Properties:
      Description: Allow HTTPs access
      GroupId: {{ grantor }}
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId
  {% endfor %}
  {% endif %}

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS service
      GroupName: !Sub ${Namespace}-service-securitygroup
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - Description: Allow access on ContainerPort
          IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId

  DBInstanceSecurityGroupApplicationIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Condition: HasDBInstance
    Properties:
      GroupId: !Ref DBInstanceSecurityGroup
      IpProtocol: "tcp"
      FromPort: "5432"
      ToPort: "5432"
      SourceSecurityGroupId: !Ref ServiceSecurityGroup

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !If [CreateCluster, !Ref ECSCluster, !Ref ClusterName]
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      ServiceName: !Sub ${Namespace}-service
      SchedulingStrategy: REPLICA
      DesiredCount: !Ref ContainerCount
      LoadBalancers:
        - ContainerName: !Sub ${Namespace}-container
          ContainerPort: !Ref ContainerPort
          LoadBalancerName: !Ref AWS::NoValue
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref SubnetIDs
      PlatformVersion: 'LATEST'
      EnableExecuteCommand: true
      DeploymentConfiguration:
        MaximumPercent: !Ref ServiceTaskMaximumPercent
        MinimumHealthyPercent: !Ref ServiceTaskMinimumHealthyPercent
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
    DependsOn: HttpListener

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      {% if sceptre_user_data and sceptre_user_data.ApplicationType is defined %}
      Scheme: {{ sceptre_user_data.ApplicationType }}
      {% endif %}
      Name: !Sub ${Namespace}-alb
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref SubnetIDs

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: !Ref HealthCheckPath
      Name: !Sub ${Namespace}-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSSLCert
    Properties:
      Port: 443
      Protocol: HTTPS
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Certificates:
        - CertificateArn: !Ref SSLCertArn
      SslPolicy: ELBSecurityPolicy-2016-08

  {% with sceptre_user_data=sceptre_user_data|default({}) %}
  {% with alarm_config=sceptre_user_data.alarm_config|default({}) %}

  {% with cpu_alarm=alarm_config.cpu|default({}) %}
  CloudWatchServiceCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Namespace}-service-cpu-alarm
      AlarmDescription: CPU utilization > {{ cpu_alarm.threshold|default('90') }}%
      {% if alarm_config.actions is defined %}
      AlarmActions:
      {% for action in alarm_config.actions %}
        - {{ action }}
      {% endfor %}
      OKActions:
      {% for action in alarm_config.actions %}
        - {{ action }}
      {% endfor %}
      {% endif %}
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: {{ cpu_alarm.period|default('60') }}
      EvaluationPeriods: {{ cpu_alarm.evaluation_periods|default('3') }}
      Threshold: {{ cpu_alarm.threshold|default('90') }}
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing
      Dimensions:
        - Name: ServiceName
          Value: !Sub ${Namespace}-service
        - Name: ClusterName
          Value: !If [CreateCluster, !Ref ECSCluster, !Ref ClusterName]
  {% endwith %}

  {% with memory_alarm=alarm_config.memory|default({}) %}
  CloudWatchServiceMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Namespace}-service-memory-alarm
      AlarmDescription: !Sub Memory utilization > {{ memory_alarm.threshold|default('90') }}% on ${Namespace}
      {% if alarm_config.actions is defined %}
      AlarmActions:
      {% for action in alarm_config.actions %}
        - {{ action }}
      {% endfor %}
      OKActions:
      {% for action in alarm_config.actions %}
        - {{ action }}
      {% endfor %}
      {% endif %}
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: {{ memory_alarm.period|default('60') }}
      EvaluationPeriods: {{ memory_alarm.evaluation_periods|default(3) }}
      Threshold: {{ memory_alarm.threshold|default('90') }}
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing
      Dimensions:
        - Name: ServiceName
          Value: !Sub ${Namespace}-service
        - Name: ClusterName
          Value: !If [CreateCluster, !Ref ECSCluster, !Ref ClusterName]
  {% endwith %}

  {% with fivexx_alarm=alarm_config.fivexx|default({}) %}
  CloudWatchALB5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Namespace}-5xx-alarm
      AlarmDescription: !Sub "5XX errors > {{fivexx_alarm.threshold|default('2')}} in the last {{fivexx_alarm.period|default('900')}} seconds on ${Namespace}"
      {% if alarm_config.actions is defined %}
      AlarmActions:
      {% for action in alarm_config.actions %}
        - {{ action }}
      {% endfor %}
      OKActions:
      {% for action in alarm_config.actions %}
        - {{ action }}
      {% endfor %}
      {% endif %}
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: {{ fivexx_alarm.period|default('900') }}
      EvaluationPeriods: {{ fivexx_alarm.evaluation_periods|default('1') }}
      Threshold: {{ fivexx_alarm.threshold|default('2') }}
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
  {% endwith %}

  {% if alarm_config.fourxx is defined %}
  CloudWatchALB4xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Namespace}-4xx-alarm
      AlarmDescription: !Sub "4XX errors > {{ alarm_config.fourxx.threshold }} in the last 15 minutes on ${Namespace}"
      {% if alarm_config.actions is defined %}
      AlarmActions:
      {% for action in alarm_config.actions %}
        - {{ action }}
      {% endfor %}
      OKActions:
      {% for action in alarm_config.actions %}
        - {{ action }}
      {% endfor %}
      {% endif %}
      MetricName: HTTPCode_Target_4XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: {{ alarm_config.fourxx.period }}
      EvaluationPeriods: {{ alarm_config.fourxx.evaluation_periods }}
      Threshold: {{ alarm_config.fourxx.threshold }}
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
  {% endif %}

  {% endwith %}
  {% endwith %}

Outputs:
  ECSCluster:
    Description: The ECS Cluster
    Value: !If [CreateCluster, !Ref ECSCluster, !Ref ClusterName]

  TaskDefinition:
    Description: The ECS Task Definition
    Value: !Ref TaskDefinition

  LoadBalancerSecurityGroup:
    Description: The Security Group
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId

  ServiceSecurityGroup:
    Description: The Service Security Group
    Value: !Ref ServiceSecurityGroup

  ECSService:
    Description: The ECS Service
    Value: !Ref ECSService

  LoadBalancer:
    Description: The Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerDNS:
    Description: The DNS Name of the Load Balancer
    Value: !GetAtt LoadBalancer.DNSName

  HttpListener:
    Description: The Http Listener
    Value: !Ref HttpListener

  TargetGroup:
    Description: The Target Group
    Value: !Ref TargetGroup

  TaskRole:
    Description: The Task Role - attach policies to this role to grant permissions to task containers
    Value: !Ref ECSTaskRole

  LogGroup:
    Description: The CloudWatch Log Group
    Value: !Sub /ecs/${Namespace}
