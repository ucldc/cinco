AWSTemplateFormatVersion: 2010-09-09

Description: CodeBuild Project with optional ECR Repo; build triggered by
  push to the specified branch and changes to the specified file path, logs
  are in the CloudWatch group /codebuild/<Namespace> stream name "build"

Parameters:
  GitHubRepo:
    Description: The URL of the GitHub repository to pull code from
    Type: String
  ECRRepositoryURI:
    Description: The URI of the ECR repository - if not provided, will create
      one using sceptre_user_data.ECRRepositoryName as the name, if available.
    Type: String
    Default: ""
  Namespace:
    Description: The namespace for the CodeBuild project
    Type: String
  Branch:
    Description: The branch to build from
    Type: String
    Default: main
  BuildSpecLocation:
    Description: The path to the buildspec.yml file in the GitHub repository -
      this should be relative to the root of the repo.
      If neither sceptre_user_data.build_spec, nor Parameters.BuildSpecLocation
      are provided, the default value of "buildspec.yml" will be used.
    Type: String
    Default: "buildspec.yml"

Conditions:
  CreateRepo: !Equals [!Ref ECRRepositoryURI, ""]

Resources:
  {% if sceptre_user_data and
    (sceptre_user_data.ECRRepositoryName is defined or
    sceptre_user_data.stack_parameters.ECRRepositoryURI is defined)
  %}
  {# if ECRRepositoryURI is defined, we need to have this CF block, even though
    CreateRepo will == False and ECRRepositoryName will == '', so that Outputs
    doesn't throw an error. TODO: this is all super messy - move optional,
    mutually exclusive parameters 'URI' and 'Name' to sceptre_user_data and out
    of params #}
  ECRRepository:
    Type: AWS::ECR::Repository
    Condition: CreateRepo
    Properties:
      {% if sceptre_user_data.ECRRepositoryName is defined %}
      RepositoryName: {{ sceptre_user_data.ECRRepositoryName }}
      {% else %}
      RepositoryName: ''
      {% endif %}
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Only keep 5 images",
              "selection": {
                "tagStatus": "untagged",
                "countType": "imageCountMoreThan",
                "countNumber": 5
              },
              "action": { "type": "expire" }
            }]
          }
    DeletionPolicy: Retain
  {% endif %}

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-codebuild
      Path: "/service-role/"
      {% if sceptre_user_data and sceptre_user_data.CodeBuildPolicies is defined %}
      {% for policy in sceptre_user_data.CodeBuildPolicies %}
      ManagedPolicyArns:
        - {{ policy }}
      {% endfor %}
      {% endif %}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ codebuild.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]

  CodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${Namespace}-codebuild-policy
      Path: "/"
      Roles: [ !Ref CodeBuildRole ]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/codebuild/${Namespace}
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/codebuild/${Namespace}:*
          - Effect: Allow
            Action:
              - ecr-public:GetAuthorizationToken
              - ecr-public:BatchCheckLayerAvailability
              - ecr-public:InitiateLayerUpload
              - ecr-public:UploadLayerPart
              - ecr-public:CompleteLayerUpload
              - ecr-public:PutImage
              - sts:GetServiceBearerToken
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Resource: "*"
          - Effect: Allow
            Action:
              - ecs:RunTask
              - ecs:DescribeTasks
              - ecs:DescribeTaskDefinition
              - ecs:RegisterTaskDefinition
              - ecs:UpdateService
              - cloudformation:DescribeStacks
              - iam:PassRole
              - logs:GetLogEvents
              - logs:FilterLogEvents
            Resource: "*"
          {% if sceptre_user_data and sceptre_user_data.additional_policy_statements is defined %}
          {{ sceptre_user_data.additional_policy_statements }}
          {% endif %}

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref Namespace
      Description: !Sub Builds the ${Namespace} docker image and pushes to ECR
      ServiceRole: !GetAtt CodeBuildRole.Arn
      SourceVersion: !Ref Branch
      Source:
        Type: GITHUB
        Location: !Ref GitHubRepo
        Auth:
          Type: OAUTH
        GitCloneDepth: 1
        {% if sceptre_user_data and sceptre_user_data.build_spec is defined %}
        BuildSpec: {{ sceptre_user_data.build_spec }}
        {% else %}
        BuildSpec: !Ref BuildSpecLocation
        {% endif %}
      Environment:
        Image: aws/codebuild/amazonlinux-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          {% if sceptre_user_data and sceptre_user_data.BuildEnvironment is defined %}
          {% for env_var in sceptre_user_data.BuildEnvironment %}
          {% for key, value in env_var.items() %}
          - Name: "{{ key }}"
            Value: "{{ value }}"
          {% endfor %}
          {% endfor %}
          {% endif %}
      Triggers:
        Webhook: true
        FilterGroups: {{ sceptre_user_data.TriggerFilterGroups }}
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /codebuild/${Namespace}
          Status: ENABLED
          StreamName: build

{% if sceptre_user_data and
  (sceptre_user_data.ECRRepositoryName is defined or
   sceptre_user_data.stack_parameters.ECRRepositoryURI is defined)
%}
Outputs:
  ECRRepository:
    Description: The ECR Repository URI
    Value: !If [CreateRepo, !GetAtt ECRRepository.RepositoryUri, !Ref ECRRepositoryURI]
{% endif %}
