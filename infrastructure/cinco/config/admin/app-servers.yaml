template:
  path: ecs-webapp.j2
  type: file
parameters:
  Namespace: cinco-admin
  VpcId: !environment_variable VPC_ID
  SubnetIDs: !environment_variable SUBNET_IDS
  # ContainerImage: "public.ecr.aws/docker/library/httpd:2.4"
  # ContainerEntryPoint: 'sh,-c'
  ContainerImage: '${AWS::AccountId}.dkr.ecr.us-west-2.amazonaws.com/cinco/admin'
  ContainerEntryPoint: '/entrypoint'
  HealthCheckPath: '/'
  ContainerCommand: "/start"
  # ContainerCommand: >-
  #   /bin/sh -c "echo '<html> <head> <title>Amazon ECS Sample
  #   App</title> <style>body {margin-top: 40px; background-color:
  #   #333;} </style> </head><body> <div
  #   style=color:white;text-align:center> <h1>Amazon ECS Sample
  #   App</h1> <h2>Congratulations!</h2> <p>Your application is now
  #   running on a container in Amazon ECS.</p> </div></body></html>' >
  #   /usr/local/apache2/htdocs/index.html && httpd-foreground"
sceptre_user_data:
  ContainerEnvironment:
    # TODO: this is a circular dependency, but not sure how to resolve
    # the db.yaml stack depends on the Security Group
    # created in this stack
    # - POSTGRES_HOST: !stack_output admin/db.yaml::RDSHostName
    - POSTGRES_PORT: 5432
    - POSTGRES_DB: postgres
    - POSTGRES_USER: !environment_variable DB_USERNAME
    - POSTGRES_PASSWORD: !environment_variable DB_PASSWORD
    - DJANGO_SETTINGS_MODULE: config.settings.production
    - DJANGO_SECRET_KEY: !environment_variable DJANGO_SECRET_KEY
    - DJANGO_ADMIN_URL: !environment_variable DJANGO_ADMIN_URL
    - DJANGO_AWS_STORAGE_BUCKET_NAME: !environment_variable S3_BUCKET
    - WEB_CONCURRENCY: 4
