# Generated by Django 5.0.9 on 2024-12-02 19:51

import cincoctrl.findingaids.validators
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0002_repository_repositorylink_userrole'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExpressRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_filing', models.CharField(max_length=255, verbose_name='Collection Title (Filing)')),
                ('date', models.CharField(max_length=128, verbose_name='Collection Date')),
                ('start_year', models.IntegerField(blank=True, null=True)),
                ('end_year', models.IntegerField(blank=True, null=True)),
                ('extent', models.TextField(verbose_name='Extent of Collection')),
                ('abstract', models.TextField()),
                ('language', models.CharField(max_length=3, verbose_name='Language of materials')),
                ('accessrestrict', models.TextField(verbose_name='Access Conditions')),
                ('userestrict', models.TextField(blank=True, verbose_name='Publication Rights')),
                ('acqinfo', models.TextField(blank=True, verbose_name='Acquisition Information')),
                ('scopecontent', models.TextField(verbose_name='Scope and Content of Collection')),
                ('bioghist', models.TextField(blank=True, verbose_name='Biography/Administrative History')),
                ('online_items_url', models.URLField(blank=True, verbose_name='Online Items URL')),
                ('author_statement', models.TextField(blank=True)),
                ('preferred_citation', models.TextField(blank=True)),
                ('processing_information', models.TextField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExpressRecordCreator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator_type', models.CharField(choices=[('persname', 'Person'), ('famname', 'Family'), ('corpname', 'Organization')], max_length=10)),
                ('value', models.TextField()),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findingaids.expressrecord')),
            ],
        ),
        migrations.CreateModel(
            name='ExpressRecordSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_type', models.CharField(choices=[('subject', 'Topic'), ('persname', 'Person'), ('famname', 'Family'), ('corpname', 'Organization'), ('geogname', 'Geographic coverage'), ('genreform', 'Genre'), ('title', 'Title'), ('function', 'Function'), ('occupation', 'Occupation')], max_length=10)),
                ('value', models.TextField()),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findingaids.expressrecord')),
            ],
        ),
        migrations.CreateModel(
            name='FindingAid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ark', models.CharField(max_length=255, unique=True)),
                ('collection_title', models.CharField(max_length=255)),
                ('collection_number', models.CharField(max_length=255)),
                ('ead_file', models.FileField(blank=True, null=True, upload_to='ead/', validators=[django.core.validators.FileExtensionValidator(['xml']), cincoctrl.findingaids.validators.validate_ead])),
                ('record_type', models.CharField(choices=[('express', 'Record Express'), ('ead', 'EAD'), ('ead_pdf', 'EAD with PDF')], max_length=10)),
                ('status', models.CharField(choices=[('imported', 'Imported'), ('previewed', 'Previewed'), ('published', 'Published'), ('updated', 'Updated')], default='imported', max_length=50)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.repository')),
            ],
        ),
        migrations.AddField(
            model_name='expressrecord',
            name='finding_aid',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='findingaids.findingaid'),
        ),
        migrations.CreateModel(
            name='RevisionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_revised', models.DateTimeField(auto_now_add=True)),
                ('note', models.TextField(verbose_name='Revision Note')),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findingaids.expressrecord')),
            ],
        ),
        migrations.CreateModel(
            name='SupplementaryFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf_file', models.FileField(upload_to='pdf/', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('finding_aid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findingaids.findingaid')),
            ],
        ),
    ]
